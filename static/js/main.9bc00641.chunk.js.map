{"version":3,"sources":["Components/TodoListHooks.js","firebase.js","Components/Fireauth.js","App.js","serviceWorker.js","index.js"],"names":["TodoListHooks","useState","item","setItem","itemList","setItemList","className","Card","color","CardBody","CardTitle","Form","onSubmit","e","preventDefault","id","length","text","FormGroup","row","Col","Input","type","value","placeholder","onChange","target","Button","md","CardText","map","items","key","onClick","itemListId","updatedList","filter","console","log","deleteTask","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","Fireauth","email","setEmail","password","setPassword","user","setUser","loader","setLoader","create","a","createUserWithEmailAndPassword","alert","useEffect","unsub","onAuthStateChanged","logout","signOut","signin","signInWithEmailAndPassword","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wUAmGeA,MAvFf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAyBA,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,mBACb,kBAACC,EAAA,EAAD,CAAMD,UAAU,YAAYE,MAAM,QAChC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWJ,UAAU,aACnB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,8DAEF,yBAAKA,UAAU,UACb,kBAACK,EAAA,EAAD,CAAMC,SAzBH,SAACC,GACpBA,EAAEC,iBACW,KAATZ,IAXJG,EAAY,GAAD,mBACND,GADM,CAET,CACEW,GAAIX,EAASY,OAAS,EACtBC,KAAMf,MASVC,EAAQ,OAsBU,kBAACe,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,MAAOrB,EACPsB,YAAY,WACZC,SAAU,SAACZ,GAAD,OAAOV,EAAQU,EAAEa,OAAOH,WAGtC,kBAACI,EAAA,EAAD,CACEL,KAAK,SACLd,MAAM,UACNF,UAAU,SACVsB,GAAI,GAJN,iBAaV,kBAACC,EAAA,EAAD,KACE,4BACGzB,EAAS0B,KAAI,SAACC,GAAD,OACZ,wBAAIC,IAAKD,EAAMhB,IACb,yBAAKT,UAAU,OACb,yBAAKA,UAAU,eAAeyB,EAAMd,MACpC,kBAACU,EAAA,EAAD,CACErB,UAAU,sBACV2B,QAAS,kBAjDd,SAACC,GAClB,IAAMC,EAAc/B,EAASgC,QAAO,SAAClC,GAAD,OAAUA,EAAKa,KAAOmB,KAC1D7B,EAAY8B,GACZE,QAAQC,IAAIlC,GA8CyBmC,CAAWR,EAAMhB,MAFlC,kB,iDC5DvByB,IAASC,cAVa,CACrBC,OAAQ,0CACRC,WAAY,6BACZC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,8CAKD,IAAMC,EAAKR,IAASQ,OC0EbC,MA1Ff,WACE,MAA0BhD,mBAAS,IAAnC,mBAAOiD,EAAP,KAAcC,EAAd,KACA,EAAgClD,mBAAS,IAAzC,mBAAOmD,EAAP,KAAiBC,EAAjB,KACA,EAAwBpD,mBAAS,IAAjC,mBAAOqD,EAAP,KAAaC,EAAb,KACA,EAA4BtD,oBAAS,GAArC,mBAAOuD,EAAP,KAAeC,EAAf,KAGIC,EAAM,uCAAG,sBAAAC,EAAA,sEAGbF,GAAU,GAHG,SAIGT,EAAKY,+BAA+BV,EAAOE,GAJ9C,cAKbK,GAAU,GALG,gDAObA,GAAU,GACVI,MAAM,KAAQ,sIARD,yDAAH,qDAcVC,qBAAU,WACR,IAAIC,EAAQf,EAAKgB,oBAAmB,SAACV,GAAD,OAAUC,EAAQD,MACtD,OAAO,WACLS,OAED,IAEH,IAAIE,EAAM,uCAAG,sBAAAN,EAAA,sEACLX,EAAKkB,UADA,2CAAH,qDAGNC,EAAM,uCAAG,sBAAAR,EAAA,sEAEXF,GAAU,GAFC,SAGLT,EAAKoB,2BAA2BlB,EAAOE,GAHlC,OAIXK,GAAU,GAJC,gDAMXA,GAAU,GACTI,MAAM,KAAO,4IAPH,yDAAH,qDAeV,OACE,oCACEL,EAAW,wEAAuD,KACzD,MAARF,EACC,6BACE,6BAEE,2BACEhC,KAAK,OACLhB,UAAU,UACVkB,YAAY,qBACZD,MAAO2B,EACPmB,UAAQ,EACR5C,SAAU,SAACZ,GAAD,OAAOsC,EAAStC,EAAEa,OAAOH,WAGvC,6BAEE,2BACED,KAAK,WACLhB,UAAU,UACV+D,UAAQ,EACR9C,MAAO6B,EACP5B,YAAY,yBACZC,SAAU,SAACZ,GAAD,OAAOwC,EAAYxC,EAAEa,OAAOH,WAG1C,yBAAKjB,UAAU,aACb,4BAAQA,UAAU,UAAU2B,QAASkC,GAArC,0BAEF,yBAAK7D,UAAU,aACb,4BAASA,UAAU,UAAU2B,QAASyB,GAAtC,sBAIJ,oCACE,4BAASpD,UAAU,eAAe2B,QAASgC,GAA3C,UACA,kBAAC,EAAD,SC1EKK,MATf,WACE,OACE,yBAAKvD,GAAG,OAEP,kBAAC,EAAD,QCGewD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.9bc00641.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Input,\r\n  FormGroup,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n} from \"reactstrap\";\r\nfunction TodoListHooks() {\r\n  const [item, setItem] = useState(\"\");\r\n  const [itemList, setItemList] = useState([]);\r\n\r\n  const addlist = () => {\r\n    setItemList([\r\n      ...itemList,\r\n      {\r\n        id: itemList.length + 1,\r\n        text: item,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (item === \"\") return;\r\n    addlist();\r\n    setItem(\"\");\r\n  };\r\n\r\n  const deleteTask = (itemListId) => {\r\n    const updatedList = itemList.filter((item) => item.id !== itemListId);\r\n    setItemList(updatedList);\r\n    console.log(itemList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row row-content mt-0 \">\r\n        <div className=\"col-12 col-md-6\">\r\n          <Card className=\"card-size\" color=\"dark\">\r\n            <CardBody>\r\n              <CardTitle className=\"cardtitle\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-12\">\r\n                    <h3>Add Items to your to-do list!</h3>\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <FormGroup row>\r\n                        <Col>\r\n                          <Input\r\n                            type=\"text\"\r\n                            value={item}\r\n                            placeholder=\"Add Task\"\r\n                            onChange={(e) => setItem(e.target.value)}\r\n                          />\r\n                        </Col>\r\n                        <Button\r\n                          type=\"submit\"\r\n                          color=\"primary\"\r\n                          className=\"btn-md\"\r\n                          md={2}\r\n                        >\r\n                          Add Item\r\n                        </Button>\r\n                      </FormGroup>\r\n                    </Form>\r\n                  </div>\r\n                </div>\r\n              </CardTitle>\r\n              <CardText>\r\n                <ul>\r\n                  {itemList.map((items) => (\r\n                    <li key={items.id}>\r\n                      <div className=\"row\">\r\n                        <div className=\"col-10 text\">{items.text}</div>\r\n                        <Button\r\n                          className=\"btn-sm deletebutton\"\r\n                          onClick={() => deleteTask(items.id)}\r\n                        >\r\n                          x\r\n                        </Button>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </CardText>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoListHooks;\r\n","// import { initializeApp } from \"firebase/app\";\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/storage';\r\nimport 'firebase/compat/firestore';\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBMS3kL4sfhjp60nMOuHf_vls7QYNzsWBo\",\r\n  authDomain: \"todo-e75dc.firebaseapp.com\",\r\n  projectId: \"todo-e75dc\",\r\n  storageBucket: \"todo-e75dc.appspot.com\",\r\n  messagingSenderId: \"604897785737\",\r\n  appId: \"1:604897785737:web:b99b8dd491ceebbb7a1358\"\r\n};\r\n\r\n// Initialize Firebase\r\n firebase.initializeApp(firebaseConfig);\r\n export const auth=firebase.auth();","import React, { useEffect, useState } from \"react\";\r\nimport { auth } from \"../firebase\";\r\nimport TodoListHooks from \"./TodoListHooks\";\r\n// import './App.css';\r\n\r\nfunction Fireauth() {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [user, setUser] = useState(\"\");\r\n  const [loader, setLoader] = useState(false);\r\n\r\n\r\n  let create = async () => {\r\n\r\ntry {\r\n  setLoader(true)\r\n  let res = await auth.createUserWithEmailAndPassword(email, password);\r\n  setLoader(false)\r\n} catch (error) {\r\n  setLoader(false)\r\n  alert(error + \" Enter user-name(....@gmail.com is compulsory ) and password Then click on Create Button If you are a new user or login first time\")\r\n}\r\n    // let res = await auth.createUserWithEmailAndPassword(email, password);\r\n    // console.log(res);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let unsub = auth.onAuthStateChanged((user) => setUser(user));\r\n    return () => {\r\n      unsub();\r\n    };\r\n  }, []);\r\n\r\n  let logout = async () => {\r\n    await auth.signOut();\r\n  };\r\n  let signin = async () => {\r\n  try {\r\n    setLoader(true)\r\n    await auth.signInWithEmailAndPassword(email, password);\r\n    setLoader(false);\r\n  } catch (error) {\r\n    setLoader(false)\r\n     alert(error +\" NOTE=>Enter user-name(....@gmail.com is compulsory ) and password Then click on Create Button If you are a new user or login first time\");\r\n  }\r\n    \r\n    // await auth.signInWithEmailAndPassword(email, password);\r\n\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n    {(loader) ? (<h4 >Wait Verifying User...Page is Loading...</h4>) :  null}\r\n      {user == null ? (\r\n        <div>\r\n          <div>\r\n            {/* <label htmlFor=\"email\">Email </label> */}\r\n            <input\r\n              type=\"text\"\r\n              className=\"button2\"\r\n              placeholder=\"username@gmail.com\"\r\n              value={email}\r\n              required\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            {/* <label htmlFor=\"password\">Password</label> */}\r\n            <input\r\n              type=\"password\"\r\n              className=\"button2\"\r\n              required\r\n              value={password}\r\n              placeholder=\"Min Six Digit Password\"\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"buttonDiv\">\r\n            <button className=\"button1\" onClick={signin}>Sign In Existing User</button>\r\n          </div>\r\n          <div className=\"buttonDiv\"  > \r\n            <button  className=\"button1\" onClick={create}> Create New User</button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <button  className=\"buttonLogout\" onClick={logout}>Logout</button>\r\n          <TodoListHooks />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Fireauth;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoListHooks from './Components/TodoListHooks'\r\nimport Fireauth from './Components/Fireauth';\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"bag\">\r\n      {/* <TodoListHooks/> */}\r\n     <Fireauth/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}