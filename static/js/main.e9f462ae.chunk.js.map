{"version":3,"sources":["Components/TodoListHooks.js","Components/TodoListClass.js","App.js","serviceWorker.js","index.js"],"names":["TodoListHooks","useState","item","setItem","itemList","setItemList","className","Card","color","CardBody","CardTitle","Form","onSubmit","e","preventDefault","id","length","text","FormGroup","row","Col","Input","type","value","placeholder","onChange","target","Button","md","CardText","map","items","key","onClick","itemListId","updatedList","filter","console","log","deleteTask","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAuEeA,MArEf,WACI,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA+BF,mBAAS,IAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KAsBA,OACI,yBAAKC,UAAW,aACZ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,mBACX,kBAACC,EAAA,EAAD,CAAMD,UAAU,YAAYE,MAAM,WAC9B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWJ,UAAU,aACjB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,8DAEJ,yBAAMA,UAAU,UAChB,kBAACK,EAAA,EAAD,CAAMC,SAzBnB,SAAAC,GACfA,EAAEC,iBACQ,KAAPZ,IARHG,EAAY,GAAD,mBAAKD,GAAL,CAAc,CACrBW,GAAGX,EAASY,OAAO,EACnBC,KAAKf,MAQTC,EAAQ,OAsBwB,kBAACe,EAAA,EAAD,CAAWC,KAAG,GACV,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,MAAOrB,EAAMsB,YAAY,WAAWC,SAAU,SAAAZ,GAAC,OAAEV,EAAQU,EAAEa,OAAOH,WAEzF,kBAACI,EAAA,EAAD,CAAQL,KAAK,SAASd,MAAM,UAAUF,UAAU,SAASsB,GAAI,GAA7D,iBAMhB,kBAACC,EAAA,EAAD,KACQ,4BACKzB,EAAS0B,KAAI,SAAAC,GAAK,OACnB,wBAAIC,IAAKD,EAAMhB,IACX,yBAAKT,UAAU,OACX,yBAAKA,UAAU,eACVyB,EAAMd,MAEX,kBAACU,EAAA,EAAD,CAAQrB,UAAU,sBAAsB2B,QAAS,kBArC5E,SAACC,GACd,IAAMC,EAAc/B,EAASgC,QAAO,SAAAlC,GAAI,OAAEA,EAAKa,KAAKmB,KACpD7B,EAAY8B,GACZE,QAAQC,IAAIlC,GAkCiFmC,CAAWR,EAAMhB,MAAtE,kB,uCCtDpByB,YCWbC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.e9f462ae.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {Button,Form,Input, FormGroup,Col,Card,CardBody, CardTitle, CardText} from 'reactstrap'\r\nfunction TodoListHooks(){\r\n    const [item,setItem] = useState(\"\");\r\n    const [itemList,setItemList] = useState([]);\r\n\r\n    const addlist=()=>{\r\n        setItemList([...itemList,{\r\n            id:itemList.length+1,\r\n            text:item\r\n        }])\r\n    }\r\n    \r\n    const handleSubmit=e=>{\r\n        e.preventDefault();\r\n        if(item===\"\") return;\r\n        addlist();\r\n        setItem(\"\")\r\n    }\r\n\r\n    const deleteTask=(itemListId)=>{\r\n        const updatedList = itemList.filter(item=>item.id!==itemListId);\r\n        setItemList(updatedList);\r\n        console.log(itemList);\r\n    }\r\n\r\n    return(\r\n        <div className= \"container\">\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12 col-md-6\">\r\n                    <Card className=\"card-size\" color=\"success\">\r\n                        <CardBody>\r\n                            <CardTitle className=\"cardtitle\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <h3>Add Items to your to-do list!</h3>\r\n                                    </div>\r\n                                    <div  className=\"col-12\">\r\n                                    <Form onSubmit={handleSubmit}>\r\n                                        <FormGroup row>\r\n                                            <Col>\r\n                                                <Input type=\"text\" value={item} placeholder=\"Add Task\" onChange={e=>setItem(e.target.value)}/>\r\n                                            </Col>\r\n                                            <Button type=\"submit\" color=\"primary\" className=\"btn-md\" md={2}>Add Item</Button>\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                    </div>\r\n                                </div>\r\n                            </CardTitle>\r\n                            <CardText>\r\n                                    <ul>\r\n                                        {itemList.map(items=>(\r\n                                        <li key={items.id}>\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-10 text\">\r\n                                                    {items.text}\r\n                                                </div>\r\n                                                <Button className=\"btn-sm deletebutton\" onClick={()=>deleteTask(items.id)}>x</Button>\r\n                                            </div>\r\n                                        </li>\r\n                                        ))}  \r\n                                    </ul>\r\n                            </CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoListHooks;   ","import React, {Component} from 'react';\r\nimport {Button,Form,Input, FormGroup,Col,Card,CardBody, CardTitle, CardText} from 'reactstrap'\r\n\r\nclass TodoListClass extends Component{\r\n\r\n    constructor(props) {\r\n      super(props)\r\n    \r\n      this.state = {\r\n         item:\"\",\r\n         itemList:[]\r\n      };    \r\n\r\n      this.handleChange=this.handleChange.bind(this);\r\n      this.handleSubmit=this.handleSubmit.bind(this);\r\n      this.deleteTask=this.deleteTask.bind(this)\r\n\r\n    };\r\n    \r\n    handleChange=e=>{\r\n        this.setState({\r\n            item:e.target.value\r\n        })\r\n    }   \r\n\r\n    deleteTask=(itemListId)=>{  \r\n        const updatedList = this.state.itemList.filter(item=>itemListId!==item.key);\r\n        this.setState({ \r\n            itemList:([updatedList])   \r\n        })\r\n        console.log(updatedList);\r\n    }\r\n    \r\n    handleSubmit=e=>{\r\n        e.preventDefault();\r\n        if(this.state.item===\"\") return;\r\n        this.setState({\r\n            itemList:([\r\n                ...this.state.itemList,{\r\n                    text:this.state.item,\r\n                    key:Date.now()\r\n                }\r\n            ]),\r\n            item:\"\"\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className= \"container\">\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12 col-md-6\">\r\n                        <Card className=\"card-size\" color=\"danger\">\r\n                            <CardBody>\r\n                                <CardTitle className=\"cardtitle\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-12\">\r\n                                            <h3>Add Items to your to-do list!</h3>\r\n                                        </div>\r\n                                        <div  className=\"col-12\">\r\n                                        <Form onSubmit={this.handleSubmit}>\r\n                                            <FormGroup row>\r\n                                                <Col>\r\n                                                    <Input type=\"text\" placeholder=\"Add Task\" value={this.state.item} onChange={this.handleChange}/>\r\n                                                </Col>\r\n                                                <Button type=\"submit\" color=\"primary\" className=\"btn-md\" md={2}>Add Item</Button>\r\n                                            </FormGroup>\r\n                                        </Form>\r\n                                        </div>\r\n                                    </div>\r\n                                </CardTitle>\r\n                                <CardText>\r\n                                        <ul>\r\n                                            {this.state.itemList.map(items=>(\r\n                                            <li key={items.key}>\r\n                                                <div className=\"row\">   \r\n                                                    <div className=\"col-10 text\">\r\n                                                        {items.text}\r\n                                                    </div>\r\n                                                    <Button className=\"btn-sm deletebutton\" onClick={()=>this.deleteTask(items.key)}>x</Button>\r\n                                                </div>\r\n                                            </li>\r\n                                            ))}  \r\n                                        </ul>\r\n                                </CardText>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    }\r\n\r\nexport default TodoListClass;","import React from 'react';\r\nimport './App.css';\r\nimport TodoListHooks from './Components/TodoListHooks'\r\nimport TodoListClass from './Components/TodoListClass';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <TodoListHooks/>\r\n      {/* <TodoListClass/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}